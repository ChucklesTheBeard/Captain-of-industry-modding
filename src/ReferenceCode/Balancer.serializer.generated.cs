// WARNING: This file was automatically generated by `RunSerializersGenerator.tt` T4 template. Do not change it manually!
using Mafi.Collections;
using Mafi.Collections.ImmutableCollections;
using Mafi.Core;
using Mafi.Core.Economy;
using Mafi.Core.Factory.ElectricPower;
using Mafi.Core.Ports;
using Mafi.Core.Simulation;
using Mafi.Serialization;
using Mafi.Core.Factory.Zippers;
using Mafi;
using System;
using System.Collections.Generic;

namespace ExampleMod.ReferenceCode {
	public partial class Balancer {

		private static readonly Action<object, BlobWriter> s_serializeDataDelayedAction =
			(obj, writer) => ((Balancer)obj).SerializeData(writer);

		public static void Serialize(Balancer value, BlobWriter writer) {
			if (writer.TryStartClassSerialization(value)) {
				writer.EnqueueDataSerialization(value, s_serializeDataDelayedAction);
			}
		}

		protected override void SerializeData(BlobWriter writer) {
			base.SerializeData(writer);
			writer.WriteGeneric(m_assetTransactionManager);
			Queueue<ZipBuffProduct>.Serialize(m_buffer, writer);
			writer.WriteGeneric(m_electricityConsumer);
			Option<QuantityLarge[]>.Serialize(m_inputCounts, writer);
			Queueue<KeyValuePair<UniversalPort, ProductQuantity>>.Serialize(m_inputQueue, writer);
			writer.WriteInt(m_lastUsedPortIndex);
			Option<QuantityLarge[]>.Serialize(m_outputCounts, writer);
			UniversalPortsHelper.Serialize(m_portsHelper, writer);
			ImmutableArray<char>.Serialize(m_priorityPortNames, writer);
			writer.WriteGeneric(m_simLoopEvents);
			writer.WriteBool(PrioritizeInput);
			writer.WriteBool(PrioritizeOutput);
			writer.WriteGeneric(Prototype);
		}

		private static readonly Action<object, BlobReader> s_deserializeDataDelayedAction =
			(obj, reader) => ((Balancer)obj).DeserializeData(reader);

		public static Balancer Deserialize(BlobReader reader) {
			if (reader.TryStartClassDeserialization(out Balancer obj)) {
				reader.EnqueueDataDeserialization(obj, s_deserializeDataDelayedAction);
			}
			return obj;
		}

		protected override void DeserializeData(BlobReader reader) {
			base.DeserializeData(reader);
			BlobReader.SetField(this, nameof(m_assetTransactionManager), reader.ReadGenericAs<IAssetTransactionManager>());
			BlobReader.SetField(this, nameof(m_buffer), Queueue<ZipBuffProduct>.Deserialize(reader));
			BlobReader.SetField(this, nameof(m_electricityConsumer), reader.ReadGenericAs<IElectricityConsumer>());
			m_inputCounts = Option<QuantityLarge[]>.Deserialize(reader);
			BlobReader.SetField(this, nameof(m_inputQueue), Queueue<KeyValuePair<UniversalPort, ProductQuantity>>.Deserialize(reader));
			m_lastUsedPortIndex = reader.ReadInt();
			m_outputCounts = Option<QuantityLarge[]>.Deserialize(reader);
			BlobReader.SetField(this, nameof(m_portsHelper), UniversalPortsHelper.Deserialize(reader));
			m_priorityPortNames = ImmutableArray<char>.Deserialize(reader);
			BlobReader.SetField(this, nameof(m_simLoopEvents), reader.ReadGenericAs<ISimLoopEvents>());
			PrioritizeInput = reader.ReadBool();
			PrioritizeOutput = reader.ReadBool();
			BlobReader.SetField(this, nameof(Prototype), reader.ReadGenericAs<ZipperProto>());
		}

	}
}